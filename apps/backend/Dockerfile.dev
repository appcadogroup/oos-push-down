# # ---- build ----
# FROM node:22-alpine AS build
# WORKDIR /opt

# COPY shared/package*.json shared/
# COPY backend/package*.json backend/

# WORKDIR /opt/backend
# RUN npm install --omit=dev

# WORKDIR /opt
# COPY shared ./shared
# COPY backend ./backend

# # Generate Prisma Client
# WORKDIR /opt/backend
# RUN npx prisma generate --schema ../shared/prisma/schema.prisma

# # Build API
# RUN npm run build

# # ---- runtime ----
# FROM node:22-alpine
# ENV NODE_ENV=production

# # bring both backend and shared so ../shared/... resolves
# WORKDIR /opt
# COPY --from=build /opt/shared ./shared
# COPY --from=build /opt/backend ./backend

# WORKDIR /opt/backend
# EXPOSE 3012
# HEALTHCHECK --interval=10s --timeout=3s --retries=30 CMD wget -qO- http://localhost:3012/healthz || exit 1
# CMD ["npm","run","start"]


FROM node:22-alpine
WORKDIR /app

# Copy manifests first for better caching
COPY package.json ./
COPY apps/backend/package.json apps/backend/
COPY packages/db/package.json packages/db/
COPY packages/redis/package.json packages/redis/
COPY packages/core/package.json packages/core/

# copy prisma schema early so postinstall can find it
COPY packages/db/prisma packages/db/prisma

RUN NODE_ENV=development npm install --workspaces --include=dev && npm --global install nodemon

# Copy source
COPY . .

# Ensure Prisma client exists
RUN npm run -w packages/db prisma:generate

ENV PORT=3012
EXPOSE 3012
# CMD ["npm","run","-w","apps/backend","dev"]
CMD ["npm","run","dev:backend"]
